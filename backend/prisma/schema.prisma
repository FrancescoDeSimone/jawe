// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model WorkflowTemplate {
  id          String        @id @default(uuid())
  name        String        @unique
  steps       Step[] // Array of steps representing the workflow structure
  connections Connection[] // Array of connections representing the DAG edges
  workflows   WorkflowRun[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Step {
  id                    String           @id @default(uuid())
  workflowTemplate      WorkflowTemplate @relation(fields: [workflowTemplateId], references: [id])
  workflowTemplateId    String
  name                  String
  type                  String // Plugin type identifier
  inputs                Json
  visualizationMetadata Json
  fromConnections       Connection[]     @relation("fromStepRelation")
  toConnections         Connection[]     @relation("toStepRelation")
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  StepRun               StepRun[]
}

model Connection {
  id                 String           @id @default(uuid())
  workflowTemplate   WorkflowTemplate @relation(fields: [workflowTemplateId], references: [id])
  workflowTemplateId String
  fromStep           Step             @relation("fromStepRelation", fields: [fromStepId], references: [id], onDelete: Cascade)
  fromStepId         String
  toStep             Step             @relation("toStepRelation", fields: [toStepId], references: [id], onDelete: Cascade)
  toStepId           String
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
}

model WorkflowRun {
  id         String           @id @default(uuid())
  template   WorkflowTemplate @relation(fields: [templateId], references: [id])
  templateId String
  status     WorkflowStatus
  startTime  DateTime
  endTime    DateTime?
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  StepRun    StepRun[]
}

model StepRun {
  id        String        @id @default(uuid())
  step      Step          @relation(fields: [stepId], references: [id])
  stepId    String
  run       WorkflowRun   @relation(fields: [runId], references: [id])
  runId     String
  status    StepRunStatus
  output    Json
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

enum WorkflowStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
}

enum StepRunStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
}
