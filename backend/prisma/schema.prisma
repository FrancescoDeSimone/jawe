generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model WorkflowTemplate {
  id           String                 @id @default(uuid())
  name         String                 @unique
  steps        Step[]
  connections  Connection[]
  workflows    WorkflowRun[]
  entryPoint   Step?                  @relation("entryPointStep", fields: [entryPointId], references: [id])
  entryPointId String?                @unique
  status       WorkflowTemplateStatus @default(DRAFT)
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
  triggers     Trigger[]
}

model Step {
  id                    String            @id @default(uuid())
  workflowTemplate      WorkflowTemplate  @relation(fields: [workflowTemplateId], references: [id], onDelete: Cascade)
  workflowTemplateId    String
  name                  String
  type                  String
  inputs                Json
  visualizationMetadata Json
  fromConnections       Connection[]      @relation("fromStepRelation")
  toConnections         Connection[]      @relation("toStepRelation")
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  stepRuns              StepRun[]
  workflowTemplateEntry WorkflowTemplate? @relation("entryPointStep")
  isConfigured          Boolean           @default(false)
}

model Connection {
  id                 String           @id @default(uuid())
  workflowTemplate   WorkflowTemplate @relation(fields: [workflowTemplateId], references: [id], onDelete: Cascade)
  workflowTemplateId String
  fromStep           Step             @relation("fromStepRelation", fields: [fromStepId], references: [id], onDelete: Cascade)
  fromStepId         String
  toStep             Step             @relation("toStepRelation", fields: [toStepId], references: [id], onDelete: Cascade)
  toStepId           String
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
}

model WorkflowRun {
  id           String           @id @default(uuid())
  template     WorkflowTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  templateId   String
  status       WorkflowStatus   @default(PENDING)
  startTime    DateTime?
  endTime      DateTime?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  stepRuns     StepRun[]
  triggerRun   TriggerRun       @relation(fields: [triggerRunId], references: [id])
  triggerRunId String           @unique
}

model StepRun {
  id        String        @id @default(uuid())
  step      Step          @relation(fields: [stepId], references: [id], onDelete: Cascade)
  stepId    String
  run       WorkflowRun   @relation(fields: [runId], references: [id], onDelete: Cascade)
  runId     String
  status    StepRunStatus
  output    Json
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model Trigger {
  id                    String           @id @default(uuid())
  workflowTemplate      WorkflowTemplate @relation(fields: [workflowTemplateId], references: [id], onDelete: Cascade)
  workflowTemplateId    String
  type                  String
  inputs                Json
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  visualizationMetadata Json
  isConfigured          Boolean          @default(false)
  TriggerRun            TriggerRun[]
}

model TriggerRun {
  id            String       @id @default(uuid())
  workflowRun   WorkflowRun?
  workflowRunId String?      @unique
  output        Json
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  trigger       Trigger      @relation(fields: [triggerId], references: [id], onDelete: Cascade)
  triggerId     String
}

enum WorkflowStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
}

enum StepRunStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
}

enum WorkflowTemplateStatus {
  DRAFT
  PUBLISHED
}
